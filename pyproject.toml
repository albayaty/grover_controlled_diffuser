[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "grover_controlled_diffuser"
description = "Grover controlled-diffuser (CUs)"
version = "1.1"
readme = { file = "README.md", content-type = "text/markdown" }
license = { file = "LICENSE" }
authors = [
    { name = "Ali Al-Bayaty", email = "albayaty@pdx.edu" },
]
keywords = ["qiskit", "quantum", "quantum computing", "Grover algorithm", "Grover diffusion operator", "Grover diffuser"]
classifiers = [	
	"Development Status :: 5 - Production/Stable",
	"Intended Audience :: Developers",
	"Intended Audience :: Science/Research",
	"License :: OSI Approved :: Apache Software License",
	"Operating System :: MacOS",
	"Operating System :: POSIX :: Linux",
	"Operating System :: Microsoft :: Windows",
	"Programming Language :: Python",
	"Programming Language :: Python :: 3.9",
	"Programming Language :: Python :: 3.10",
	"Programming Language :: Python :: 3.11",
	"Programming Language :: Python :: 3.12",
	"Topic :: Scientific/Engineering",
]
requires-python = ">=3.9"
# Check the `tool.setuptools.dynamic` table:
dynamic = ["dependencies"]

[project.urls]
Homepage = "https://github.com/albayaty"
Repository = "https://github.com/albayaty/grover_controlled_diffuser"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.dynamic]
dependencies = {file = "requirements.txt" }

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q"
testpaths = [
    "tests",
]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']

[tool.ruff]
select = [
  # Rules in alphabetic order:
  "C4",     # category: flake8-comprehensions
  "EXE",    # Category: flake8-executable
  "F631",   # assert-tuple
  "F632",   # is-literal
  "F634",   # if-tuple
  "F823",   # undefined-local
  "G",      # flake8-logging-format
  "T10",    # category: flake8-debugger
]

[tool.coverage.report]
exclude_also = [
    "def __repr__",                # Printable representational string does not typically execute during testing
    "raise NotImplementedError",   # Abstract methods are not testable
    "raise RuntimeError",          # Exceptions for defensive programming that cannot be tested a head
    "if TYPE_CHECKING:",           # Code that only runs during type checks
    "@abstractmethod",             # Abstract methods are not testable
]

